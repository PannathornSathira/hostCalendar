{"ast":null,"code":"var _jsxFileName = \"/Users/bossthemeow/Desktop/calendar_project/client/src/components/ChatGPT/ChatGPT.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport './ChatGPT.css';\nexport default function ChatGPT() {\n  const [response, setResponse] = useState(\"\");\n  const [gptResponse, setGptResponse] = useState(\"\"); // State to hold GPT response\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\n  const [updatedTitle, setUpdatedTitle] = useState(\"\");\n  const location = useLocation();\n  const title = new URLSearchParams(location.search).get(\"title\");\n  const HTTP = \"http://localhost:8080/chat\";\n  useEffect(() => {\n    // Request response using description as the initial prompt when the component mounts\n    if (title) {\n      axios.post(HTTP, {\n        prompt: title\n      }).then(res => {\n        setResponse(res.data);\n        // Set GPT response to the input field\n        setGptResponse(res.data);\n        // Set initial updated description to GPT response\n        setUpdatedDescription(res.data);\n        setUpdatedTitle(res.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [title, HTTP]);\n  const handleDescriptionUpdate = title => {\n    // Update description in the database\n    axios.put(\"http://localhost:3004/update\", {\n      title: title,\n      description: updatedDescription\n    }).then(res => {\n      // Update the state with the new description\n      setGptResponse(updatedDescription);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const handleTitleUpdate = () => {\n    // Update the title\n    setUpdatedTitle(title);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bigcon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container container-sm p-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title text-center text-darkGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Details of meeting\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"This is a details of the meeting \", title), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"GPT Prompt : \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"updateInput\",\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    value: updatedTitle // Display the title\n    ,\n    onChange: event => setUpdatedTitle(event.target.value) // Allow user to edit the title\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Updated Description : \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"updateInput\",\n    type: \"text\",\n    id: \"description\",\n    name: \"description\",\n    value: updatedDescription // Set the value of the input to the updatedDescription state\n    ,\n    onChange: event => {\n      setUpdatedDescription(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDescriptionUpdate(title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Process again\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"GPT Response\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-darkGreen mt-2 p-1 border-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, response ? response : \"Response is loading...\")), /*#__PURE__*/React.createElement(Link, {\n    to: `/systemprocess?title=${encodeURIComponent(title)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Confirm meeting details\"))));\n}","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","Link","ChatGPT","response","setResponse","gptResponse","setGptResponse","updatedDescription","setUpdatedDescription","updatedTitle","setUpdatedTitle","location","title","URLSearchParams","search","get","HTTP","post","prompt","then","res","data","catch","error","console","log","handleDescriptionUpdate","put","description","handleTitleUpdate","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","value","onChange","event","target","onClick","to","encodeURIComponent"],"sources":["/Users/bossthemeow/Desktop/calendar_project/client/src/components/ChatGPT/ChatGPT.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport './ChatGPT.css';\n\nexport default function ChatGPT() {\n  const [response, setResponse] = useState(\"\");\n  const [gptResponse, setGptResponse] = useState(\"\"); // State to hold GPT response\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\n  const [updatedTitle, setUpdatedTitle] = useState(\"\");\n  const location = useLocation();\n  const title = new URLSearchParams(location.search).get(\"title\");\n  const HTTP = \"http://localhost:8080/chat\";\n\n  useEffect(() => {\n    // Request response using description as the initial prompt when the component mounts\n    if (title) {\n      axios\n        .post(HTTP, { prompt: title })\n        .then((res) => {\n          setResponse(res.data);\n          // Set GPT response to the input field\n          setGptResponse(res.data);\n          // Set initial updated description to GPT response\n          setUpdatedDescription(res.data);\n          setUpdatedTitle(res.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [title, HTTP]);\n\n  const handleDescriptionUpdate = (title) => {\n    // Update description in the database\n    axios\n      .put(\"http://localhost:3004/update\", {\n        title: title,\n        description: updatedDescription,\n      })\n      .then((res) => {\n        // Update the state with the new description\n        setGptResponse(updatedDescription);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleTitleUpdate = () => {\n    // Update the title\n    setUpdatedTitle(title);\n  };\n\n  return (\n    <div className=\"bigcon\">\n      <div className=\"container container-sm p-1\">\n        <h1 className=\"title text-center text-darkGreen\">Details of meeting</h1>\n        <h2>This is a details of the meeting {title}</h2>\n        <label>GPT Prompt : </label>\n        <input\n          className=\"updateInput\"\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={updatedTitle} // Display the title\n          onChange={(event) => setUpdatedTitle(event.target.value)} // Allow user to edit the title\n        />\n        <div className=\"inputbox\">\n          <br />\n          <label>Updated Description : </label>\n          <input\n            className=\"updateInput\"\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            value={updatedDescription} // Set the value of the input to the updatedDescription state\n            onChange={(event) => {\n              setUpdatedDescription(event.target.value);\n            }}\n          />\n          <button onClick={() => handleDescriptionUpdate(title)}>Process again</button>\n          <br />\n        </div>\n        <h2>GPT Response</h2>\n        <div className=\"bg-darkGreen mt-2 p-1 border-5\">\n          <p className=\"text-light\">\n            {response ? response : \"Response is loading...\"}\n          </p>\n        </div>\n        <Link to={`/systemprocess?title=${encodeURIComponent(title)}`}>\n          <button>Confirm meeting details</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}