{"ast":null,"code":"var _jsxFileName = \"/Users/bossthemeow/Desktop/calendar_project/client/src/components/ChatGPT/ChatGPT.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport './ChatGPT.css';\nexport default function ChatGPT() {\n  const [response, setResponse] = useState(\"\");\n  const [gptResponse, setGptResponse] = useState(\"\"); // State to hold GPT response\n  const location = useLocation();\n  const title = new URLSearchParams(location.search).get(\"title\");\n  var extractedText = title.split(\" \")[0];\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\n  const HTTP = \"http://localhost:8080/chat\";\n  useEffect(() => {\n    // Request response using description as the initial prompt when the component mounts\n    if (title) {\n      axios.post(HTTP, {\n        prompt: title\n      }).then(res => {\n        setResponse(res.data);\n        // Set GPT response to the input field\n        setGptResponse(res.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [title, HTTP]);\n  const handleDescriptionUpdate = title => {\n    // Update description in the database\n    axios.put(\"http://localhost:3004/update\", {\n      title: title,\n      description: gptResponse\n    }).then(res => {\n      // Update the state with the new description\n      setUpdatedDescription(gptResponse);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bigcon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container container-sm p-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title text-center text-darkGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Details of meeting\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"This is a details of the meeting \", title), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"GPT Prompt : \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"updateInput\",\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    value: title // Set the value of the input to the GPT response\n    ,\n    onChange: event => {\n      setUpdatedDescription(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Updated Description : \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"updateInput\",\n    type: \"text\",\n    id: \"description\",\n    name: \"description\",\n    value: gptResponse // Set the value of the input to the GPT response\n    ,\n    onChange: event => {\n      setUpdatedDescription(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Process again\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"GPT Response\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-darkGreen mt-2 p-1 border-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, response ? response : \"Response is loading...\")), /*#__PURE__*/React.createElement(Link, {\n    to: `/systemprocess?title=${encodeURIComponent(extractedText)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      handleDescriptionUpdate(title);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Confirm meeting details\"))));\n}","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","Link","ChatGPT","response","setResponse","gptResponse","setGptResponse","location","title","URLSearchParams","search","get","extractedText","split","updatedDescription","setUpdatedDescription","HTTP","post","prompt","then","res","data","catch","error","console","log","handleDescriptionUpdate","put","description","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","value","onChange","event","target","to","encodeURIComponent","onClick"],"sources":["/Users/bossthemeow/Desktop/calendar_project/client/src/components/ChatGPT/ChatGPT.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport './ChatGPT.css';\n\nexport default function ChatGPT() {\n  const [response, setResponse] = useState(\"\");\n  const [gptResponse, setGptResponse] = useState(\"\"); // State to hold GPT response\n  const location = useLocation();\n  const title = new URLSearchParams(location.search).get(\"title\");\n  var extractedText = title.split(\" \")[0];\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\n  const HTTP = \"http://localhost:8080/chat\";\n\n  useEffect(() => {\n    // Request response using description as the initial prompt when the component mounts\n    if (title) {\n      axios\n        .post(HTTP, { prompt: title })\n        .then((res) => {\n          setResponse(res.data);\n          // Set GPT response to the input field\n          setGptResponse(res.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [title, HTTP]);\n\n  const handleDescriptionUpdate = (title) => {\n    // Update description in the database\n    axios\n      .put(\"http://localhost:3004/update\", {\n        title: title,\n        description: gptResponse,\n      })\n      .then((res) => {\n        // Update the state with the new description\n        setUpdatedDescription(gptResponse);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className=\"bigcon\">\n      <div className=\"container container-sm p-1\">\n        <h1 className=\"title text-center text-darkGreen\">Details of meeting</h1>\n        <h2 >This is a details of the meeting {title}</h2>\n        <label>GPT Prompt : </label>\n        <input className=\"updateInput\"\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={title} // Set the value of the input to the GPT response\n          onChange={(event) => {\n            setUpdatedDescription(event.target.value)\n          }} />\n        <div className=\"inputbox\">\n        <br /> \n        <label>Updated Description : </label>\n        <input className=\"updateInput\"\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          value={gptResponse} // Set the value of the input to the GPT response\n          onChange={(event) => {\n            setUpdatedDescription(event.target.value)\n          }}\n        />\n        <button>Process again</button>\n        <br />\n        </div>\n        <h2 >GPT Response</h2>\n        <div className=\"bg-darkGreen mt-2 p-1 border-5\">\n          <p className=\"text-light\">\n            {response ? response : \"Response is loading...\"}\n          </p>\n        </div>\n        <Link to={`/systemprocess?title=${encodeURIComponent(extractedText)}`}>\n          <button onClick={() => { handleDescriptionUpdate(title) }}>Confirm meeting details</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}